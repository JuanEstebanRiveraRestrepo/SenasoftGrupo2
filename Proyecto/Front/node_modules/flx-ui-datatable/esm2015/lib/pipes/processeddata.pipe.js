/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
import { FlxUiDatatableService } from '../flx-ui-datatable.service';
export class ProcessedData {
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
    }
    /**
     * @param {?} dataIndex
     * @return {?}
     */
    transform(dataIndex) {
        let /** @type {?} */ isProcessed = false;
        let /** @type {?} */ foundIndex = -1;
        for (let /** @type {?} */ i = 0; i < this.service.processedData.length; i++) {
            if (i == dataIndex) {
                isProcessed = true;
                foundIndex = i;
            }
        }
        if (foundIndex < 0) {
            this.service.processedData.push(dataIndex);
        }
        return isProcessed;
    }
}
ProcessedData.decorators = [
    { type: Pipe, args: [{
                name: 'isprocessed'
            },] },
];
/** @nocollapse */
ProcessedData.ctorParameters = () => [
    { type: FlxUiDatatableService }
];
function ProcessedData_tsickle_Closure_declarations() {
    /** @type {?} */
    ProcessedData.prototype.service;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzc2VkZGF0YS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZmx4LXVpLWRhdGF0YWJsZS8iLCJzb3VyY2VzIjpbImxpYi9waXBlcy9wcm9jZXNzZWRkYXRhLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFFO0FBQ3BELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBS3BFLE1BQU07Ozs7SUFDRixZQUFtQixPQUE4QjtRQUE5QixZQUFPLEdBQVAsT0FBTyxDQUF1QjtLQUVoRDs7Ozs7SUFFRCxTQUFTLENBQUMsU0FBZ0I7UUFDdEIscUJBQUksV0FBVyxHQUFZLEtBQUssQ0FBRTtRQUNsQyxxQkFBSSxVQUFVLEdBQVcsQ0FBQyxDQUFDLENBQUU7UUFDN0IsR0FBRyxDQUFBLENBQUMscUJBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUM7WUFDakQsRUFBRSxDQUFBLENBQUMsQ0FBQyxJQUFFLFNBQVMsQ0FBQyxDQUFBLENBQUM7Z0JBQ2IsV0FBVyxHQUFHLElBQUksQ0FBRTtnQkFDcEIsVUFBVSxHQUFHLENBQUMsQ0FBRTthQUNuQjtTQUNKO1FBRUQsRUFBRSxDQUFBLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQyxDQUFBLENBQUM7WUFDYixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUU7U0FDL0M7UUFFRCxNQUFNLENBQUMsV0FBVyxDQUFFO0tBQ3ZCOzs7WUF2QkosSUFBSSxTQUFDO2dCQUNGLElBQUksRUFBQyxhQUFhO2FBQ3JCOzs7O1lBSlEscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSxQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZScgO1xyXG5pbXBvcnQgeyBGbHhVaURhdGF0YWJsZVNlcnZpY2UgfSBmcm9tICcuLi9mbHgtdWktZGF0YXRhYmxlLnNlcnZpY2UnO1xyXG5cclxuQFBpcGUoe1xyXG4gICAgbmFtZTonaXNwcm9jZXNzZWQnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQcm9jZXNzZWREYXRhIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybXtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBzZXJ2aWNlOiBGbHhVaURhdGF0YWJsZVNlcnZpY2Upe1xyXG5cclxuICAgIH1cclxuXHJcbiAgICB0cmFuc2Zvcm0oZGF0YUluZGV4Om51bWJlcik6IGJvb2xlYW57XHJcbiAgICAgICAgbGV0IGlzUHJvY2Vzc2VkOiBib29sZWFuID0gZmFsc2UgO1xyXG4gICAgICAgIGxldCBmb3VuZEluZGV4OiBudW1iZXIgPSAtMSA7XHJcbiAgICAgICAgZm9yKGxldCBpPTA7aTx0aGlzLnNlcnZpY2UucHJvY2Vzc2VkRGF0YS5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgaWYoaT09ZGF0YUluZGV4KXtcclxuICAgICAgICAgICAgICAgIGlzUHJvY2Vzc2VkID0gdHJ1ZSA7XHJcbiAgICAgICAgICAgICAgICBmb3VuZEluZGV4ID0gaSA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKGZvdW5kSW5kZXg8MCl7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuc2VydmljZS5wcm9jZXNzZWREYXRhLnB1c2goZGF0YUluZGV4KSA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaXNQcm9jZXNzZWQgO1xyXG4gICAgfVxyXG59Il19